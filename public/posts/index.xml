<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on Random notes to myself</title>
    <link>https://localhost:1313/posts/</link>
    <description>Recent content in Posts on Random notes to myself</description>
    <generator>Hugo -- 0.140.2</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 12 Jan 2025 15:48:38 +0300</lastBuildDate>
    <atom:link href="https://localhost:1313/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go assembly notes</title>
      <link>https://localhost:1313/posts/2025-01-12-golang-assembly-notes/</link>
      <pubDate>Sun, 12 Jan 2025 15:48:38 +0300</pubDate>
      <guid>https://localhost:1313/posts/2025-01-12-golang-assembly-notes/</guid>
      <description>&lt;p&gt;mention a few words about go pseudo assembly&lt;/p&gt;
&lt;p&gt;Trying to compile and disassembly code of the whole project makes no sense. Use small snippets of code.&lt;/p&gt;
&lt;p&gt;example code in &lt;code&gt;main.go&lt;/code&gt; file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;package&lt;/span&gt; main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold;font-style:italic;text-decoration:underline&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;use &lt;code&gt;go tool compile&lt;/code&gt; to get object files.&lt;br&gt;
&lt;code&gt;go tool compile main.go&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go slices mind-twister</title>
      <link>https://localhost:1313/posts/2024-05-05-go-slices-mind-twister/</link>
      <pubDate>Sun, 05 May 2024 15:48:38 +0300</pubDate>
      <guid>https://localhost:1313/posts/2024-05-05-go-slices-mind-twister/</guid>
      <description>&lt;p&gt;This &lt;a href=&#34;https://gist.github.com/janosdebugs/f0a3b91a0a070ffb067de4dc22a93c64&#34;&gt;snippet&lt;/a&gt; of code got me off guard.&lt;br&gt;
Having a somewhat decent experience with golang I could not explain what is it doing and it took me embarrassingly a lot of time to figure out a sound explanation for what was going on.&lt;/p&gt;
&lt;p&gt;After I figured out the answer, I think that my sleep deprivation just played tricks on me. Still let&amp;rsquo;s dig into this.&lt;/p&gt;
&lt;p&gt;Down below is the same snippet but with a slice of integers for simplicity:&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://localhost:1313/posts/2022-07-25-networking-notes/</link>
      <pubDate>Sat, 24 Jun 2023 17:29:38 +0200</pubDate>
      <guid>https://localhost:1313/posts/2022-07-25-networking-notes/</guid>
      <description>&lt;p&gt;Bandwidth — amount of data we can send over a period of time
Latency — time it takes to send a request and receive a response&lt;/p&gt;</description>
    </item>
    <item>
      <title>Case of a leaking timer in go</title>
      <link>https://localhost:1313/posts/2022-11-13-go-memory-leak-timer/</link>
      <pubDate>Sun, 13 Nov 2022 01:00:00 +0200</pubDate>
      <guid>https://localhost:1313/posts/2022-11-13-go-memory-leak-timer/</guid>
      <description>&lt;p&gt;It was only an accident that I read a &lt;a href=&#34;https://www.arangodb.com/2020/09/a-story-of-a-memory-leak-in-go-how-to-properly-use-time-after&#34;&gt;post on ArangoDB site&lt;/a&gt;
and found the same leak in one of our projects at work. So this is going to be quite short, but nevertheless I want for have
it in form of a blogpost.&lt;/p&gt;
&lt;p&gt;Here is how leak looked like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;package&lt;/span&gt; main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;import&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;runtime&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;time&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold;font-style:italic;text-decoration:underline&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        messags := &lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;make&lt;/span&gt;(&lt;span style=&#34;font-weight:bold;font-style:italic;text-decoration:underline&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;string&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;for&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;select&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;case&lt;/span&gt; msg := &amp;lt;- messages:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#888;font-style:italic&#34;&gt;// do smth with msg
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;&lt;/span&gt;                        fmt.&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;Println&lt;/span&gt;(msg)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;return&lt;/span&gt; msg
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;case&lt;/span&gt; &amp;lt;-time.&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;After&lt;/span&gt;(time.Second * 3):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#888;font-style:italic&#34;&gt;// do smth else
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-style:italic&#34;&gt;&lt;/span&gt;                        fmt.&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;3 sec timer fired&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;case&lt;/span&gt; &amp;lt;-time.&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;After&lt;/span&gt;(time.Second * 30):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        fmt.&lt;span style=&#34;color:#666;font-weight:bold;font-style:italic&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#666;font-style:italic&#34;&gt;&amp;#34;30 sec timer fired&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;font-weight:bold;text-decoration:underline&#34;&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;what-is-wrong-with-it&#34;&gt;What is wrong with it?&lt;/h3&gt;
&lt;p&gt;There is a lot:&lt;/p&gt;</description>
    </item>
    <item>
      <title>VIM cheat sheet</title>
      <link>https://localhost:1313/posts/2022-06-24-vim-notes/</link>
      <pubDate>Fri, 24 Jun 2022 17:29:38 +0200</pubDate>
      <guid>https://localhost:1313/posts/2022-06-24-vim-notes/</guid>
      <description>&lt;p&gt;These are my notes on &amp;ldquo;Mastering VIM&amp;rdquo; by Ruslan Osipov.
Also contains my own knowledge.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dd&lt;/code&gt; — delete line&lt;br&gt;
&lt;code&gt;cc&lt;/code&gt; — delete line and go into INSERT mode&lt;/p&gt;
&lt;h3 id=&#34;movements&#34;&gt;Movements&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;uppercase is for &amp;ldquo;words separated by whitespace&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;e&lt;/code&gt; or &lt;code&gt;E&lt;/code&gt; — move to the End of the word   &lt;br&gt;
&lt;code&gt;w&lt;/code&gt; or &lt;code&gt;W&lt;/code&gt; — move between Words   &lt;br&gt;
&lt;code&gt;b&lt;/code&gt; or &lt;code&gt;B&lt;/code&gt; — move Back     &lt;br&gt;
&lt;code&gt;_&lt;/code&gt; jump to the beginning of the line&lt;br&gt;
&lt;code&gt;:N&lt;/code&gt; where N is a number line. Will move you to that line number&lt;br&gt;
&lt;code&gt;gi&lt;/code&gt; places you in INSERT mode you were last time
&lt;code&gt;zz&lt;/code&gt; move current line the the center
&lt;code&gt;s&lt;/code&gt; delete single character and enter INSERT mode&lt;/p&gt;</description>
    </item>
    <item>
      <title>SOLID Go</title>
      <link>https://localhost:1313/posts/2022-06-07-solid-go/</link>
      <pubDate>Mon, 06 Jun 2022 17:29:38 +0200</pubDate>
      <guid>https://localhost:1313/posts/2022-06-07-solid-go/</guid>
      <description>&lt;p&gt;SOLID is a famous cargo-cult that is used to poke &amp;ldquo;bad&amp;rdquo; code during code review. Jokes aside there are some solid, pun
intended, ideas within SOLID. This post is yet another attempt to dismantle this set of principles and understand them
better.&lt;/p&gt;
&lt;p&gt;The SOLID stands for(pasted from wiki):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;S&lt;/strong&gt; ingle-responsibility principle: &amp;ldquo;There should never be more than one reason for a class to change.&amp;ldquo;In other words, every class should have only one responsibility&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;O&lt;/strong&gt; pen–closed principle: &amp;ldquo;Software entities &amp;hellip; should be open for extension, but closed for modification.&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;L&lt;/strong&gt; iskov substitution principle: &amp;ldquo;Functions that use pointers or references to base classes must be able to use objects of derived classes without knowing it.&amp;ldquo;See also design by contract.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;I&lt;/strong&gt; nterface segregation principle: &amp;ldquo;Many client-specific interfaces are better than one general-purpose interface.&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;D&lt;/strong&gt; ependency inversion principle: &amp;ldquo;Depend upon abstractions, [not] concretions.&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;s&#34;&gt;S&lt;/h3&gt;
&lt;h5 id=&#34;single-responsibility&#34;&gt;single responsibility&lt;/h5&gt;
&lt;p&gt;Out of all these, only first one makes sense right away. If you are not a complete beginner, you won&amp;rsquo;t create a
struct that does shipping calculation, checks weather condition, sends push notification and orders pizza. Don&amp;rsquo;t you?&lt;/p&gt;</description>
    </item>
    <item>
      <title>Notes on Garbage Collection in Golang</title>
      <link>https://localhost:1313/posts/2022-06-05-notes-on-garbage-collection-in-go/</link>
      <pubDate>Sun, 05 Jun 2022 17:29:38 +0200</pubDate>
      <guid>https://localhost:1313/posts/2022-06-05-notes-on-garbage-collection-in-go/</guid>
      <description>&lt;p&gt;Garbage Collection is a process of freeing memory that is allocated and contains some data that is not being used.&lt;/p&gt;
&lt;p&gt;Notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;by doing &lt;strong&gt;escape analysis&lt;/strong&gt; GC mechanism decides what goes to heap and what stays on stack&lt;/li&gt;
&lt;li&gt;use &lt;code&gt;-gcflags &#39;-m&#39;&lt;/code&gt; flag to get escape analysis info, e.g. &lt;code&gt;go run -gcflags &#39;-m&#39; main.go&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;another way to look into what GC is doing during runtime is to run program with &lt;code&gt;GODEBUG=gctrace=1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;GC runs consurrently with main program running&lt;/li&gt;
&lt;li&gt;main running program is called &amp;ldquo;mutator&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Golang Garbage Collection uses &amp;ldquo;tricolor algorithm&amp;rdquo; otherwise known as tricolor mark and sweep algorithm.&lt;/li&gt;
&lt;li&gt;GC represents data in the heap as graph of elements/objects&lt;/li&gt;
&lt;li&gt;channels are also garbage collected when they become unreachable, even if channel is not closed&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sources:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Simple case of profiler usage in golang</title>
      <link>https://localhost:1313/posts/2021-12-28-simple-case-of-golang-profiler-usage/</link>
      <pubDate>Tue, 28 Dec 2021 17:29:38 +0200</pubDate>
      <guid>https://localhost:1313/posts/2021-12-28-simple-case-of-golang-profiler-usage/</guid>
      <description>&lt;p&gt;So I was solving &lt;a href=&#34;https://leetcode.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/&#34;&gt;Construct Binary Tree from Inorder and Postorder Traversal&lt;/a&gt;
and I got myself more less working solution that got accepted.&lt;/p&gt;
&lt;p&gt;But it was not the fastest one.&lt;/p&gt;
&lt;p&gt;But then I though — how do I profile &lt;code&gt;buildTree&lt;/code&gt; function and see what actually takes time
in my program?&lt;/p&gt;
&lt;p&gt;Golang has an excellent set of tool available, just check an output of &lt;code&gt;go tool&lt;/code&gt;.
One of the items in a list you&amp;rsquo;ll see is &lt;code&gt;pprof&lt;/code&gt; which is a Golang profiler.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Notes on System Design</title>
      <link>https://localhost:1313/posts/2021-10-30-notes-on-system-design/</link>
      <pubDate>Sat, 30 Oct 2021 17:29:38 +0300</pubDate>
      <guid>https://localhost:1313/posts/2021-10-30-notes-on-system-design/</guid>
      <description>&lt;p&gt;These are hectic notes on a book &amp;ldquo;System design interview&amp;rdquo; by Alex Xu.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;chapter 1&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;read-through cache strategy&lt;/strong&gt; — check if we have a response cached, if we do return it, if not then fetch data from a
database, cache it and return result&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;GeoDNS&lt;/strong&gt; is a patch for BIND DNS server software that allows for geographical split horizon&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A few words about caching strategy.
Your caching strategy depends on your data access patterns. Is your system write heavy, read heavy, results are always
should be unique ?&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang concurrency tricks and patterns</title>
      <link>https://localhost:1313/posts/2021-09-04-go-patterns/</link>
      <pubDate>Sat, 04 Sep 2021 00:00:00 +0000</pubDate>
      <guid>https://localhost:1313/posts/2021-09-04-go-patterns/</guid>
      <description>&lt;p&gt;Concurrency is the composition of independently executing computations.&lt;/p&gt;
&lt;p&gt;Goroutines are not threads, but it is not wrong to think about goroutines as threads.
In fact in runtime goroutines are multiplexed onto threads that are created as needed in order to make sure
no goroutine ever blocks.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#generator&#34;&gt;Generator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#multiplexer&#34;&gt;Multiplexer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#nil-channel-trick&#34;&gt;nil channel trick&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#worker-pool&#34;&gt;Worker pool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#confinement&#34;&gt;Confinement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#error-handling&#34;&gt;Error handling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#goroutines&#34;&gt;Goroutines&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;a-namegenerator-generator-function-that-returns-never-closed-channel-a&#34;&gt;&lt;!-- raw HTML omitted --&gt; Generator. Function that returns never closed channel. &lt;!-- raw HTML omitted --&gt;&lt;/h3&gt;
&lt;p&gt;Basically &lt;code&gt;generate&lt;/code&gt; func returns unbuffered channel that is never closed and hence returns ever increasing counter.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Notes on &#39;Go in action&#39; book</title>
      <link>https://localhost:1313/posts/2021-06-26-go-in-action-notes/</link>
      <pubDate>Sun, 18 Jul 2021 00:00:00 +0000</pubDate>
      <guid>https://localhost:1313/posts/2021-06-26-go-in-action-notes/</guid>
      <description>&lt;p&gt;Slice takes 24 bit of memory — 8 bit for pointer, 8 for len and 8 for capacity.&lt;br&gt;
Passing a slice between functions is okay, since it is copied BUT in the copied version we still have the correct pointer.&lt;/p&gt;
&lt;p&gt;Reference types in Go:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;string&lt;/li&gt;
&lt;li&gt;slice&lt;/li&gt;
&lt;li&gt;map&lt;/li&gt;
&lt;li&gt;channel&lt;/li&gt;
&lt;li&gt;interface&lt;/li&gt;
&lt;li&gt;function&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The decision to use value or pointer receiver should not be based on whether method is mutating given value or not.
Decision should be based on a nature of a given type. e.g. time is always a copy, you can&amp;rsquo;t really change time. A File
can be changed so it should be passed as a reference. See how it is implemented in core library.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Notes on Building Microservices by Sam Newman</title>
      <link>https://localhost:1313/posts/2020-12-26-building-microservices-notes/</link>
      <pubDate>Sat, 26 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://localhost:1313/posts/2020-12-26-building-microservices-notes/</guid>
      <description>&lt;h4 id=&#34;chapter-3-notes-how-to-model-services&#34;&gt;Chapter 3 notes. How to model services.&lt;/h4&gt;
&lt;p&gt;What makes a good service:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;loose coupling&lt;/li&gt;
&lt;li&gt;high cohesion&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Loose coupling means a change to one service should not require a change in another service. Tight coupling might means
&amp;ldquo;chatty&amp;rdquo; communication, or wrong integration style was chosen that binds services tightly.&lt;/p&gt;
&lt;p&gt;High cohesion — we want related behavior to be in the same service, and unrelated behavior to live in another
service.&lt;/p&gt;
&lt;p&gt;Bounded context helps with those two aspects of a good service. Todo: to learn more about bounded context.&lt;/p&gt;</description>
    </item>
    <item>
      <title>A philosophy of software design by John Ousterhout</title>
      <link>https://localhost:1313/posts/2020-09-05-a-philosophy-of-software-design/</link>
      <pubDate>Sat, 05 Sep 2020 00:00:00 +0000</pubDate>
      <guid>https://localhost:1313/posts/2020-09-05-a-philosophy-of-software-design/</guid>
      <description>&lt;p&gt;I like that book and decided to make a &amp;ldquo;short&amp;rdquo; version for myself to remember it better.&lt;br&gt;
The book is only 190 pages long but it has lots of valuable advices and author takes things straight to the point.&lt;/p&gt;
&lt;p&gt;This is just my own &amp;ldquo;retelling&amp;rdquo; of the book. If you are reading this I encourage you to first buy and read the whole
book and only then this text below &lt;strong&gt;might&lt;/strong&gt; make sense to you. Or not.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Designing Data-Intensive Applications: The Big Ideas Behind Reliable, Scalable, and Maintainable Systems</title>
      <link>https://localhost:1313/posts/2020-05-08-design-data-intensive-applications/</link>
      <pubDate>Fri, 08 May 2020 00:00:00 +0000</pubDate>
      <guid>https://localhost:1313/posts/2020-05-08-design-data-intensive-applications/</guid>
      <description>&lt;p&gt;Designing Data-Intensive Applications by Martin Kleppmann is an amazing journey into the world of distributed systems. It is a must read, especially if you are like me — self-taught programmer. I think it will be usefull even if you do not plan to work with distributed systems, it is just interesting per se.&lt;br&gt;
I really learned a lot, than you Martin!&lt;/p&gt;
&lt;p&gt;I have a feeling that I managed to digest and remember around 5% of the information, and the book contains a lot of good stuff, I mean &lt;strong&gt;a lot&lt;/strong&gt;. So for myself I decided to get table of book contents and augment it with little hints and notes that will be helpful in case I want to remember something quickly.&lt;/p&gt;</description>
    </item>
    <item>
      <title>join-fetched queries in doctrine for lost dummies</title>
      <link>https://localhost:1313/posts/2020-04-25-sql-fetch-doctrine-php/</link>
      <pubDate>Sat, 25 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://localhost:1313/posts/2020-04-25-sql-fetch-doctrine-php/</guid>
      <description>&lt;h1 id=&#34;what-is-join-fetch-exactly&#34;&gt;what is JOIN FETCH exactly?&lt;/h1&gt;
&lt;p&gt;So it was not clear from the start and search engine results might confuse you even further. Here it goes —
JOIN FETCH is not an SQL feature and it does not relate to FETCH keyword in &lt;a href=&#34;https://docs.microsoft.com/en-us/sql/t-sql/language-elements/fetch-transact-sql?view=sql-server-ver15&#34;&gt;t-sql&lt;/a&gt; or any other sql dialect that uses it.&lt;/p&gt;
&lt;p&gt;Note: hydration is the process of turning fetched rows from the database into object/entities. Embarrased to admit that
I did not knew exactly what it is.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Detect cycle in singly linked list (python)</title>
      <link>https://localhost:1313/posts/2020-03-14-detect-cycle-in-linked-list/</link>
      <pubDate>Wed, 11 Mar 2020 00:00:00 +0000</pubDate>
      <guid>https://localhost:1313/posts/2020-03-14-detect-cycle-in-linked-list/</guid>
      <description>&lt;p&gt;As I&amp;rsquo;m improving my data structures knowledge and understanding I&amp;rsquo;m trying to solve different puzzles. One of them is to detect cycle in a sigly-linked list.&lt;/p&gt;
&lt;p&gt;Singly-linked list consits of nodes that reference one another. A node could look like this:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;
class Node:
    def __init__(self, value=None):
        self.next = None
        self.value = value
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So it has two properties — &lt;em&gt;next&lt;/em&gt; that contains next element, and &lt;em&gt;value&lt;/em&gt; that contains data. Could be more complex than this but lets not complicate.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Variance in PHP</title>
      <link>https://localhost:1313/posts/2020-02-29-variance-php/</link>
      <pubDate>Sat, 29 Feb 2020 00:00:00 +0000</pubDate>
      <guid>https://localhost:1313/posts/2020-02-29-variance-php/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;: I might be wrong about variance. Buyer beware!&lt;/p&gt;
&lt;p&gt;Variance is a property of class hierarchies describing how the types of a type constructor affect subtypes. Type constructor is a thingy that builds new types from the old ones.&lt;/p&gt;
&lt;p&gt;In general, a type constructor can be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Invariant&lt;/strong&gt;: if the type of the super-type constrain the type of the subtype. In plain english if you say you return an &lt;code&gt;array&lt;/code&gt; in some method of your super class — all sub-classes must comply and return &lt;code&gt;array&lt;/code&gt; as well.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Covariant&lt;/strong&gt;: if the ordering of types is preserved (types are ordered from more specific to more generic). You can imagine hierarchy tree and follow it from leaves to the root (top most superclass).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Contravariant&lt;/strong&gt;: if it reverses the order (types are ordered from more generic to more specific). Traversing type hierarchy from the root to the leaves.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is an example of invariant return type in class hierarchy, note &lt;strong&gt;same&lt;/strong&gt; return types:&lt;/p&gt;</description>
    </item>
    <item>
      <title>ACID concept</title>
      <link>https://localhost:1313/posts/2020-02-08-acid-in-databases-concept/</link>
      <pubDate>Sat, 08 Feb 2020 00:00:00 +0000</pubDate>
      <guid>https://localhost:1313/posts/2020-02-08-acid-in-databases-concept/</guid>
      <description>&lt;p&gt;I really like how Martin Kleppmann described ACID in his book, hence a little excerpt to remember.&lt;/p&gt;
&lt;p&gt;ACID stands for &lt;em&gt;Atomicity&lt;/em&gt;, &lt;em&gt;Consistency&lt;/em&gt;, &lt;em&gt;Isolation&lt;/em&gt;, and &lt;em&gt;Durability&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;It was first coined by Andreas Reuter and Theo Härder in 1983 in attempt to describe all that is necessary for the database to be fault-tolerant as much as possible.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Atomicity&lt;/strong&gt; &lt;br&gt;
Database should support transaction, namely you should be able to group you request statemets and execute them at once. The very important feature here is &lt;em&gt;abortability&lt;/em&gt; — ability to rollback any changes done in case we have an error in transaction somewhere along the way.&lt;/p&gt;</description>
    </item>
    <item>
      <title>My chaotic notes on REST API</title>
      <link>https://localhost:1313/posts/2019-09-28-my-chaotic-notes-on-rest-api/</link>
      <pubDate>Sat, 28 Sep 2019 00:00:00 +0000</pubDate>
      <guid>https://localhost:1313/posts/2019-09-28-my-chaotic-notes-on-rest-api/</guid>
      <description>&lt;p&gt;REST is paradigm or architectural style that defines your API.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;One of the most important and yet simple REST consept is resouce/endpoint, I really like resource term so I&amp;rsquo;m going to use it here. In REST paradigm URL is a resource, e.g. — &lt;a href=&#34;http://example.org/test/foo&#34;&gt;http://example.org/test/foo&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You should strive not to use verbs in URL. The only verbs you need are HTTP verbs — GET, HEAD, POST, PUT, PATCH, OPTIONS, TRACE.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Subresource in REST looks like this — &lt;code&gt;/posts/{id}/author&lt;/code&gt;. With GET verb it means — fetch me an author of this particular book. It makes no sense to continue a subresouce with additional nesting. If you have situation like this TRY to move that to separate endpoint. Although the correct answer is always — &amp;ldquo;it depends&amp;rdquo; : ) &lt;br&gt;
If you are developing something vast and complex e.g. &lt;a href=&#34;https://developer.github.com/v3/&#34;&gt;github api&lt;/a&gt; than you can/should use longer URLs to fit in all the domain logic.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Active record vs. Data Mapper</title>
      <link>https://localhost:1313/posts/2019-07-10-active-record-vs-data-mapper/</link>
      <pubDate>Wed, 10 Jul 2019 00:00:00 +0000</pubDate>
      <guid>https://localhost:1313/posts/2019-07-10-active-record-vs-data-mapper/</guid>
      <description>&lt;p&gt;In Object-oriented programming we often need to persist object to the database for later retrieval. For that to work smart people invented Object-Relation Mapper that does object to db conversion and vise versa. Such ORM object are usually called &lt;em&gt;entities&lt;/em&gt; and are passed around in application and are subject to CRUD operations.&lt;/p&gt;
&lt;p&gt;ORM implies existence of DBAL(Database Abstraction Layer) and Data Access Layer.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DBAL abstracts Quering language details of different databases and supports many databases at once. Theoretically you can switch seamlessly from one database to another, though I never heard of practical execution of this feature.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Active record&lt;/em&gt; and &lt;em&gt;Data Mapper&lt;/em&gt; are Data Access Layer patterns or better to say paradigms.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ORM advantages:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Proxy Design Pattern</title>
      <link>https://localhost:1313/posts/2019-06-08-proxy-pattern-in-php/</link>
      <pubDate>Sat, 08 Jun 2019 00:00:00 +0000</pubDate>
      <guid>https://localhost:1313/posts/2019-06-08-proxy-pattern-in-php/</guid>
      <description>&lt;h1 id=&#34;proxy-design-pattern&#34;&gt;Proxy Design Pattern&lt;/h1&gt;
&lt;p&gt;First, some definitions.&lt;/p&gt;
&lt;p&gt;Wikipedia:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In computer programming, the proxy pattern is a software design pattern. A proxy, in its most general form, is a class functioning as an interface to something else&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Design Patterns. Elements of Reusable Object-Oriented Software:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Provide a surrogate or placeholder for another object to control access to it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There are a few reasons to use Proxy pattern and control access to the underlying object:&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to send request to UNIX socket</title>
      <link>https://localhost:1313/posts/2019-05-12-debud-unix-socket/</link>
      <pubDate>Sun, 12 May 2019 00:00:00 +0000</pubDate>
      <guid>https://localhost:1313/posts/2019-05-12-debud-unix-socket/</guid>
      <description>&lt;p&gt;This is one of those notes to myself, so I can remmber it better or find it later more easy.&lt;/p&gt;
&lt;p&gt;I was recently strugging with permission problem for the unix socket, the mistake was quite silly - I did not turn permission bit on for the folder with socket file. And before I found the solution I tried to debug socket and I found that you can curl socket with&lt;/p&gt;</description>
    </item>
    <item>
      <title>Stream redirection tl;dr</title>
      <link>https://localhost:1313/posts/2019-04-30-streams_redirection/</link>
      <pubDate>Tue, 30 Apr 2019 00:00:00 +0000</pubDate>
      <guid>https://localhost:1313/posts/2019-04-30-streams_redirection/</guid>
      <description>&lt;p&gt;I love terminal, it is so simple and so reliable. When I&amp;rsquo;m in doubt, when I&amp;rsquo;m not sure the GUI
I&amp;rsquo;m working with gives me correct representation I always turn to the terminal as an ultimate source of truth.&lt;/p&gt;
&lt;p&gt;Every process has &lt;em&gt;at least&lt;/em&gt; three communication channels a.k.a. streams attached to it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;STDIN. Standard input with file descriptor &lt;code&gt;0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;STDOUT. Standard output with file decriptor &lt;code&gt;1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;STDERR. Standard error with file descriptor &lt;code&gt;2&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Usually when we work with streams we use file descriptor numbers.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Composition vs. Inheritance in PHP, tl;dr version</title>
      <link>https://localhost:1313/posts/2019-04-13-inheritance-and-composition-in-php/</link>
      <pubDate>Sat, 13 Apr 2019 00:00:00 +0000</pubDate>
      <guid>https://localhost:1313/posts/2019-04-13-inheritance-and-composition-in-php/</guid>
      <description>&lt;p&gt;After reading a numerous resources on what is composition in terms of OOP and how it plays versus inheritance, I came up with following understanding:&lt;/p&gt;
&lt;p&gt;So inheritance is awesome way to reuse code between objects but it comes at cost.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When class inherit from parent class there is no way to not implement methods/reduce parent&amp;rsquo;s code. You have to implement everything according to parent class&lt;/li&gt;
&lt;li&gt;You need to make sure you are compatible with parent&amp;rsquo;s class in case override something&lt;/li&gt;
&lt;li&gt;Child class may know about parent&amp;rsquo;s methods implementation, in case they are not private, which breaks incapsulation&lt;/li&gt;
&lt;li&gt;Inheritance means deep coupling between parent and child classes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Composition is just another way to inherit other classes
Basically you do not inherit class directly but get it injected into the constructor or via setter method. For instance:&lt;/p&gt;</description>
    </item>
    <item>
      <title>HTTP versions difference</title>
      <link>https://localhost:1313/posts/2019-03-15-http-versions-difference/</link>
      <pubDate>Fri, 15 Mar 2019 00:00:00 +0000</pubDate>
      <guid>https://localhost:1313/posts/2019-03-15-http-versions-difference/</guid>
      <description>&lt;p&gt;Here is the differences between HTTP versions with comments in plain english.&lt;/p&gt;
&lt;h2 id=&#34;http-10-capabilities&#34;&gt;HTTP 1.0 capabilities:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Request may consist of multiple newline separated header fields.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Response object is prefixed with a response status line.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Response object has its own set of newline separated header fields.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Response object is not limited to hypertext.&lt;br&gt;
So basically since this version it is not hypertext but hypermedia protocol.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The connection between server and client is closed after every request.&lt;br&gt;
One of the main drawbacks of this protocol version.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Visitor Design Pattern</title>
      <link>https://localhost:1313/posts/2019-02-17-visitor-design-pattern/</link>
      <pubDate>Sun, 17 Feb 2019 00:00:00 +0000</pubDate>
      <guid>https://localhost:1313/posts/2019-02-17-visitor-design-pattern/</guid>
      <description>&lt;p&gt;Visitor design pattern is one of many patterns that fall under category &amp;ldquo;Behavioral patterns&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Allows to &lt;strong&gt;move part of the logic/algorithm from one class to another&lt;/strong&gt;, so you can extend/add new behavior to the initial class without changing its code.&lt;/p&gt;
&lt;p&gt;One of the ways to follow &amp;ldquo;open/closed&amp;rdquo; principle.&lt;/p&gt;
&lt;p&gt;Here is an example:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;
interface Visitor {
    // quite reasonable to a visitor to be able to &amp;#34;visit&amp;#34; other classes
    public function visit(Person $person);
}

interface Person {
    public function accept(Visitor $visitor);
}

// so these two interfaces know about each other

class RealVisitor implements Visitor
{
    public function visit(Person $person)
    {
        // this sequence of &amp;#34;operations&amp;#34; is quite naive
        // but you can implement here whatever you want
        // instance of Person interface can be changed however you want
        // no need to update/change class itself
        $person-&amp;gt;name = &amp;#39;Mr. Whiskers&amp;#39;;
        print $person-&amp;gt;name . PHP_EOL;
        print $person-&amp;gt;surname . PHP_EOL;
        print $person-&amp;gt;address . PHP_EOL;
    }
}

class RealPerson implements Person 
{
    public function accept(Visitor $visitor)
    {
        $visitor-&amp;gt;visit($this);
    }
}

// camera, action!

$realVisitor = new RealVisitor;
$realPerson = new RealPerson;
$realPerson-&amp;gt;name = &amp;#39;David&amp;#39;;
$realPerson-&amp;gt;surname = &amp;#39;Hamster&amp;#39;;
$realPerson-&amp;gt;address = &amp;#39;Holland&amp;#39;;

$realPerson-&amp;gt;accept($realVisitor);


// output:
// Mr. Whiskers
// Hamster
// Holland   
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Hope it helps. Thanks!&lt;/p&gt;</description>
    </item>
    <item>
      <title>tcpdump tiny cheat sheet</title>
      <link>https://localhost:1313/posts/2018-11-10-tcpdump-how-to/</link>
      <pubDate>Sat, 10 Nov 2018 00:00:00 +0000</pubDate>
      <guid>https://localhost:1313/posts/2018-11-10-tcpdump-how-to/</guid>
      <description>&lt;p&gt;tcpdump is such an amazing tool, even knowing just basic parameters you can do a lot.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;show list of available interfaces&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    sudo tcpdump -D
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;show packets with X argument. Use A in case you want to see only textual info and skip binary in hex&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    sudo tcpdump -X
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;track only specific port&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    sudo tcpdump &amp;#39;port 8888&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;do not resolve host names, lets you see IP addresses&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    sudo tcpdump -nn
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;With all those arguments combined you can track connection to the program opened on local machine on port 8888 and see the following:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Mutation testing in PHP</title>
      <link>https://localhost:1313/posts/2018-08-02-mutation-testing-in-php/</link>
      <pubDate>Thu, 02 Aug 2018 00:00:00 +0000</pubDate>
      <guid>https://localhost:1313/posts/2018-08-02-mutation-testing-in-php/</guid>
      <description>&lt;p&gt;Today at my job I did an internal presentation on mutation testing in PHP.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Here is the presentation:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;What it lacks is the live example of how it is done. So I&amp;rsquo;m going to just short list here an example.&lt;br&gt;
For this code intro I&amp;rsquo;m going to use PHP7.2. The only PHP class we have is this one below, and it is pretty much naive but is usefull for our example:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Amazing GIT for seasoned developer.</title>
      <link>https://localhost:1313/posts/2016-12-11-amazing-git-for-seasoned-developer/</link>
      <pubDate>Wed, 13 Jun 2018 00:00:00 +0000</pubDate>
      <guid>https://localhost:1313/posts/2016-12-11-amazing-git-for-seasoned-developer/</guid>
      <description>&lt;p&gt;At first, like so many others I didn&amp;rsquo;t use git to full extent, the tool belt of &lt;code&gt;git add, git commit, git push, git pull&lt;/code&gt;
allowed me to survive through the day. At some point I realized that I need to enforce my GIT knowledge.&lt;/p&gt;
&lt;p&gt;In short GIT has an insanely rich eco system of different tools designed to do only one thing but do it very good.
This is not a post but rather a set of things I would like to remember about GIT.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to sign your commit with GPG</title>
      <link>https://localhost:1313/posts/2018-05-20-how-to-sign-git-commit-with-gpg/</link>
      <pubDate>Sun, 20 May 2018 00:00:00 +0000</pubDate>
      <guid>https://localhost:1313/posts/2018-05-20-how-to-sign-git-commit-with-gpg/</guid>
      <description>&lt;p&gt;First step - creating the key itself.&lt;/p&gt;
&lt;p&gt;Note that I&amp;rsquo;m using Fedora and for some rason I have to use &lt;code&gt;gpg2&lt;/code&gt; though &lt;code&gt;gpg&lt;/code&gt; is available also for some reason.&lt;br&gt;
Generate your key:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;gpg2 --full-gen-key&lt;/code&gt;&lt;br&gt;
First two questions - choose default answers, but for key expiration date it is up to you,&lt;br&gt;
I chose &amp;lsquo;0 = key does not expire&amp;rsquo; option.&lt;/p&gt;
&lt;p&gt;To view fingerprint for the newly created key use:&lt;br&gt;
&lt;code&gt;gpg2 --fingerprint &amp;lt;your@email.com&amp;gt;&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>wip: GraphQL and Symfony</title>
      <link>https://localhost:1313/posts/2017-12-16-graphql-php-symfony/</link>
      <pubDate>Sat, 16 Dec 2017 00:00:00 +0000</pubDate>
      <guid>https://localhost:1313/posts/2017-12-16-graphql-php-symfony/</guid>
      <description>&lt;p&gt;&lt;em&gt;Disclaimer: this post is my own understanding of graphQL and how it may be implemented with Symfony. I&amp;rsquo;m quite sure this is not a &amp;ldquo;best practice&amp;rdquo; guide and this post may contain erros, so please remember this. I do not encourage anybody to build API the way it is described here. I would be really glad if you would leave your opinion in the comments below. Thanks for reading!&lt;/em&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;In wikipedia we may find the following explanation:&lt;/p&gt;</description>
    </item>
    <item>
      <title>New features in PHP 7&#43;</title>
      <link>https://localhost:1313/posts/2017-10-08-php7-new-features/</link>
      <pubDate>Sun, 08 Oct 2017 00:00:00 +0000</pubDate>
      <guid>https://localhost:1313/posts/2017-10-08-php7-new-features/</guid>
      <description>&lt;p&gt;This post serves as a reminder, it is so easy to forget things nowadays. So here you go all in one list of PHP 7+ new features.&lt;/p&gt;
&lt;p&gt;Beware though, it is not 100% full, but 85-90% I think, I did omit some not-so-important features. I would be so glad if this article helped to save your time.&lt;/p&gt;
&lt;h2 id=&#34;changes-introduced-in-70&#34;&gt;Changes introduced in 7.0&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Scalar type declarations&lt;/strong&gt;&lt;br&gt;
An option to make PHP more stict on typing. We have the following types:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Discovery of an advanced JOIN clause in MySQL</title>
      <link>https://localhost:1313/posts/2017-08-30-additional-criteria-in-the-join-clause/</link>
      <pubDate>Mon, 04 Sep 2017 00:00:00 +0000</pubDate>
      <guid>https://localhost:1313/posts/2017-08-30-additional-criteria-in-the-join-clause/</guid>
      <description>&lt;p&gt;&lt;em&gt;A little disclaimer: this is just a short self-initialized-probably-never-released postmortem note.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Today at work I was silly enough not to ask help from my colleagues, I&amp;rsquo;ve decided to deal with the problem myself and came up with a shitty solution.&lt;br&gt;
During code review horrible hackery was revaled and I was taugh to live a simple life.&lt;/p&gt;
&lt;p&gt;Lets consider the following - there are two tables:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT * FROM docs

| id | rev |                                           content |
|----|-----|---------------------------------------------------|
|  1 |   1 |                                 The earth is flat |
|  2 |   1 | One hundred angels can dance on the head of a pin |

SELECT * FROM docvalues

| id | doc_id | property_id |  value |
|----|--------|-------------|--------|
|  1 |      1 |          10 |  First |
|  2 |      1 |          10 | Second |
|  3 |      1 |           8 |  Third |
|  4 |      2 |          10 | Fourth |
|  5 |      2 |           9 |  Fifth |
|  6 |      2 |          10 |  Sixth |
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And what we need is to select all docs with docvalues where &lt;code&gt;property_id&lt;/code&gt; is 9, thus we intend to get NULL result for those who does not have corresponding record in the docvalues. Right?&lt;/p&gt;</description>
    </item>
    <item>
      <title>PHP yield tl;dr</title>
      <link>https://localhost:1313/posts/2017-08-30-php-yield-tldr/</link>
      <pubDate>Wed, 30 Aug 2017 00:00:00 +0000</pubDate>
      <guid>https://localhost:1313/posts/2017-08-30-php-yield-tldr/</guid>
      <description>&lt;p&gt;&lt;em&gt;If you would like to run some php code samples, your own machine is fine, but I would recomment you to use &lt;a href=&#34;3v4l.org&#34;&gt;3v4l.org&lt;/a&gt; as a way to execute the code with ~200 different PHP version. That is pretty awesome.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;So for some time I avoided the &lt;code&gt;yeild&lt;/code&gt; and all generator related stuff, honestly I did not get it from the first time and from the second time too&amp;hellip; as usual It took some time
and perseverence from my side to grok that.&lt;/p&gt;</description>
    </item>
    <item>
      <title>PHP variadic functions</title>
      <link>https://localhost:1313/posts/2017-07-30-php-variadic-functions/</link>
      <pubDate>Sun, 30 Jul 2017 00:00:00 +0000</pubDate>
      <guid>https://localhost:1313/posts/2017-07-30-php-variadic-functions/</guid>
      <description>&lt;p&gt;So at first what is a variadic function ? A variadic function is a function that accepts a variable number of arguments, that is it!&lt;/p&gt;
&lt;p&gt;Starting from PHP 5.6 version we can write it using a special &amp;ldquo;splat&amp;rdquo; operator = &lt;code&gt;...&lt;/code&gt;
So the simplest example would be this:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;function variadic(...$args) {
    return $args;
} 
var_dump(variadic(1,2,3,4)); //  and you get it in form of the array [1,2,3,4]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In the earlier versions of PHP &lt;code&gt;func_get_args()&lt;/code&gt; and &lt;code&gt;func_num_args()&lt;/code&gt; were used in order to create variadic functions.
The first one gets you all the args in array form and the second you might&amp;rsquo;ve guessed just gives you a number of args.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Encoging tl;dr</title>
      <link>https://localhost:1313/posts/2017-05-28-encoding-tldr/</link>
      <pubDate>Sun, 28 May 2017 00:00:00 +0000</pubDate>
      <guid>https://localhost:1313/posts/2017-05-28-encoding-tldr/</guid>
      <description>&lt;p&gt;Well, this is my own version of TLDR for an amazing post by &lt;a href=&#34;https://twitter.com/deceze&#34;&gt;David C. Zentgraf&lt;/a&gt;. As a self-starter I always struggle to find a good source of information which would give me ample view on the subject and the post writtend by David revealed the whole world of encoding to me.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Every text is just a sequence of bytes. Period.
There are 128 symbols defined in ASCII table and out of 8 bits ASCII uses only 7.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Pragmatic Programmer synopsis</title>
      <link>https://localhost:1313/posts/2017-01-14-pragmatic-programmer-synopsis/</link>
      <pubDate>Sat, 14 Jan 2017 00:00:00 +0000</pubDate>
      <guid>https://localhost:1313/posts/2017-01-14-pragmatic-programmer-synopsis/</guid>
      <description>&lt;p&gt;Here are all the tips from the book Pragmatic Programmer. It was published in October, 1999 and since then became one the best known books about software engineering.
Just as I started to write this post, I found that Jeff Atwood already &lt;a href=&#34;https://blog.codinghorror.com/a-pragmatic-quick-reference&#34;&gt;wrote&lt;/a&gt; about this post.
But I like to finish what I started, so let there be yet another post praising this great book.
The list is mostly copy-paste, some day I&amp;rsquo;ll have time to add my own comments to each Tip, though most if the Tips are pretty self-explanatory.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
