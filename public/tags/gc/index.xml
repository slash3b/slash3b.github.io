<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>GC on Random notes to myself</title>
    <link>https://localhost:1313/tags/gc/</link>
    <description>Recent content in GC on Random notes to myself</description>
    <generator>Hugo -- 0.125.6</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 05 Jun 2022 17:29:38 +0200</lastBuildDate>
    <atom:link href="https://localhost:1313/tags/gc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Notes on Garbage Collection in Golang</title>
      <link>https://localhost:1313/posts/2022-06-05-notes-on-garbage-collection-in-go/</link>
      <pubDate>Sun, 05 Jun 2022 17:29:38 +0200</pubDate>
      <guid>https://localhost:1313/posts/2022-06-05-notes-on-garbage-collection-in-go/</guid>
      <description>Garbage Collection is a process of freeing memory that is allocated and contains some data that is not being used.
Notes:
by doing escape analysis GC mechanism decides what goes to heap and what stays on stack use -gcflags &#39;-m&#39; flag to get escape analysis info, e.g. go run -gcflags &#39;-m&#39; main.go another way to look into what GC is doing during runtime is to run program with GODEBUG=gctrace=1 GC runs consurrently with main program running main running program is called &amp;ldquo;mutator&amp;rdquo; Golang Garbage Collection uses &amp;ldquo;tricolor algorithm&amp;rdquo; otherwise known as tricolor mark and sweep algorithm.</description>
    </item>
  </channel>
</rss>
